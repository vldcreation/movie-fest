# This is the OpenAPI specification for your service. It is used to generate the client code.
# To generate the server code, use the Gradle task `openApiGenerate`. The
# generated code will be placed in `build/generate-resources/main`.
#
# We will evaluate you based on how well you design your API.
# 1. How well it follows REST principles.
# 2. How easy it is to understand and use.
#
# References
# 1. https://swagger.io/specification/
openapi: 3.1.1
info:
  title: Movie Festival API
  version: 1.0.0
  description: API for managing movie festival content and interactions
  license:
    name: MIT
servers:
  - url: http://localhost:8080/api/v1
    description: Development server

paths:
  /movies/{id}/vote:
    post:
      tags: [Movies]
      summary: Vote for a movie
      security:
        - bearerAuth: ["user"]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: ulid
      responses:
        '200':
          description: Movie voted
components:
  schemas:
    ErrorResponse:
      required:
        - message
        - code
        - error
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: integer
    MovieResponse:
      type: object
      required:
        - id
        - title
        - description
        - duration
        - watch_url
        - genres
        - artists
        - views
        - votes
      properties:
        id:
          type: string
          format: ulid
        title:
          type: string
        description:
          type: string
        duration:
          type: integer
        artists:
          type: array
          items:
            type: string
        genres:
          type: array
          items:
            type: string
        watch_url:
          type: string
        views:
          type: integer
        votes:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    MovieCreateRequest:
      type: object
      required:
        - title
        - description
        - watch_url
        - duration
        - artists
        - genres
      properties:
        title:
          type: string
          x-oapi-codegen-extra-tags:
            validate: "required,min=1,max=255"
        description:
          type: string
        duration:
          type: integer
          minimum: 1
        artists:
          type: array
          items:
            type: string
        genres:
          type: array
          items:
            type: string
        watch_url:
          type: string
          format: uri

    MovieUpdateRequest:
      type: object
      required:
        - title
        - description
        - watch_url
        - duration
        - artists
        - genres
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        duration:
          type: integer
          minimum: 1
        artists:
          type: array
          items:
            type: string
        genres:
          type: array
          items:
            type: string
        watch_url:
          type: string
          format: uri

    PaginatedMoviesResponse:
      type: object
      required:
        - data
        - total
        - page
        - limit
        - total_pages
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/MovieResponse"
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer
        total_pages:
          type: integer

    PaginatedGenreViewResponse:
      type: object
      required:
        - data
        - total
        - page
        - limit
        - total_pages
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/GenreViewsResponse"
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer
        total_pages:
          type: integer

    PaginatedMovieViewsResponse:
      type: object
      required:
        - data
        - total
        - page
        - limit
        - total_pages
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/MovieViewsResponse"
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer
        total_pages:
          type: integer

    MovieViewsResponse:
      type: object
      required:
        - movie
        - views
      properties:
        movie:
          $ref: "#/components/schemas/MovieResponse"
        views:
          type: integer
          format: int64

    GenreViewsResponse:
      type: object
      required:
        - genre
        - views
      properties:
        genre:
          type: string
        views:
          type: integer
          format: int64

    UserRegistration:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    LoginResponse:
      type: object
      required:
        - token
        - expires_at
      properties:
        token:
          type: string
        expires_at:
          type: string
          format: date-time

    UserResponse:
      type: object
      required:
        - id
        - username
        - email
        - roles
        - created_at
      properties:
        id:
          type: string
          format: ulid
        username:
          type: string
        email:
          type: string
        roles:
          $ref: "#/components/schemas/Roles"
        created_at:
          type: string
          format: date-time

    Roles:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      in: header
